, uint256 firstPrice, uint256 supplyShareAmt, uint256 supplyAmt, uint256 secondPrice, uint256 borrowAmt


        // morpho_supplyShares(supplyShareAmt);
        // morpho_supplyCollateral(supplyAmt, borrower);
        // oracle.setPrice(firstPrice);
        // morpho_borrow(borrowAmt, borrower, borrower);
        // oracle.setPrice(secondPrice);


    
    // function morpho_accrueInterest(uint256 lltv) public {
    //     MarketParams memory params = MarketParams({
    //     loanToken: address(loanToken),
    //     collateralToken: address(collateralToken),
    //     oracle: address(oracle),
    //     irm: address(irm),
    //     lltv: lltv
    // });

    //     morpho.accrueInterest(params);
    // }

    // function morpho_createMarket(uint256 lltv) public {
    //     MarketParams memory params = MarketParams({
    //     loanToken: address(loanToken),
    //     collateralToken: address(collateralToken),
    //     oracle: address(oracle),
    //     irm: address(irm),
    //     lltv: lltv
    //     });
    //     //
    //     vm.prank(owner);
    //     morpho.enableIrm(address(irm));
    //     //
    //     morpho.createMarket(params);
    // }


        function morpho_borrow(uint256 assets, address onBehalf, address receiver) public {
        uint256 shares;
        bool isEven = assets % 2 == 0 ? true : false;
        if(!isEven) {
             shares = assets;
             assets = 0;
        }
        MarketParams memory params = MarketParams({
        loanToken: address(loanToken),
        collateralToken: address(collateralToken),
        oracle: address(oracle),
        irm: address(irm),
        lltv: lltv94
        });
        morpho.borrow(params, assets, shares, onBehalf, receiver);
        
    }

        function morpho_liquidate(address borrower, uint256 seizedAssets) public {
        uint256 seizedShares;
        bool isEven = seizedAssets % 2 == 0 ? true : false;
        if(!isEven) {
             seizedShares = seizedAssets;
             seizedAssets = 0;
        }

        MarketParams memory params = MarketParams({
        loanToken: address(loanToken),
        collateralToken: address(collateralToken),
        oracle: address(oracle),
        irm: address(irm),
        lltv: lltv94
        });
        morpho.liquidate(params, borrower, seizedAssets, seizedShares, '');
    }




        function morpho_liquidateShares(address borrower, uint256 seizedShares) public {
        MarketParams memory params = MarketParams({
        loanToken: address(loanToken),
        collateralToken: address(collateralToken),
        oracle: address(oracle),
        irm: address(irm),
        lltv: lltv94
        });
        morpho_supplyShares(1);
        morpho_supplyCollateral(1, address(this));
        oracle.setPrice(2000267759191294354867396256538593928);
        morpho_borrowAssets(1, address(this), address(this));
        oracle.setPrice(0);
        morpho.liquidate(params, borrower, 0, seizedShares, '');
    }

    //    function test_morphoLiquidate() public {

    //     MarketParams memory params = MarketParams({
    //     loanToken: address(loanToken),
    //     collateralToken: address(collateralToken),
    //     oracle: address(oracle),
    //     irm: address(irm),
    //     lltv: 945000000000000000
    //     });
    //     //address borrower, uint256 seizedAssets, bytes memory data, uint256 shares, uint256 price
    //     // borrow
    //     // setPrice => price crashes
    //     // liquidate
    //     morpho_supplyShares(1);
    //     morpho_supplyCollateral(1, address(this));
    //     oracle.setPrice(2000267759191294354867396256538593928);
    //     morpho_borrowAssets(1, address(this), address(this));
    //     oracle.setPrice(0);
    //     morpho.liquidate(params, address(this), 1, 0, '');
    // }



    //@note mmmmm 
    // function irm_mock(uint256 lltv, Market memory market) public {
    //      irm.borrowRate(Marketparams, market);
    // }

    function morpho_liquidate(address borrower, uint256 seizedAssets) public {
        uint256 seizedShares;
        bool isEven = seizedAssets % 2 == 0 ? true : false;
        if(!isEven) {
             seizedShares = seizedAssets;
             seizedAssets = 0;
        }

        MarketParams memory params = MarketParams({
        loanToken: address(loanToken),
        collateralToken: address(collateralToken),
        oracle: address(oracle),
        irm: address(irm),
        lltv: lltv94
        });
        morpho_supplyShares(1);
        morpho_supplyCollateral(1, address(this));
        oracle.setPrice(2000267759191294354867396256538593928);
        morpho_borrowAssets(1, address(this), address(this));
        oracle.setPrice(0);
        morpho.liquidate(params, borrower, seizedAssets, seizedShares, '');
    }